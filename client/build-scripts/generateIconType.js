const fs = require('fs');

const ICONS_FOLDER = './src/components/Icon/svg';
const GENERATED_ICON_TYPE_FILE = './src/components/Icon/IconType.ts';

function generateIconType() {
    return new Promise((resolve, reject) => {
        fs.readdir(ICONS_FOLDER, (err, files) => {
            let iconTypes = files.map(file => file.replace('.svg', ''));
            let dictionary = iconTypes.reduce((res, cur) => {
                let key = cur.toUpperCase()
                    .replace('-', '_');
                return Object.assign({ [key]: cur }, res);
            }, {});

            const typeFileText =
`/**
 * This file autogenerated. Don't change it manually
 */

enum IconType {
    ${Object.keys(dictionary)
        .map((key) => {
            return `${key} = '${dictionary[key]}',`;
        })
        .join('\n    ')
}
}

export { IconType };
`;
            //             const exportFileText =
            // `/**
            //  * This file autogenerated. Don't change it manually
            //  */
            // ${Object.keys(dictionary)
            //         .map((key) => {
            //             return `import ${dictionary[key]} from './svg/${dictionary[key]}.svg';\nexport { ${dictionary[key]} };`;
            //         })
            //         .join('\n')
            // }
            // `;

            // eslint-disable-next-line @typescript-eslint/no-shadow
            fs.writeFile(GENERATED_ICON_TYPE_FILE, typeFileText, (err) => {
                // eslint-disable-next-line @typescript-eslint/no-unused-expressions
                err ? reject(err) : resolve();
            });
        });
    });
}

generateIconType();
